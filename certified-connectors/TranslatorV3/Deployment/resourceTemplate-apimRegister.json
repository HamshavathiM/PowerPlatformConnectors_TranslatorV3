{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {},
  "variables": {
    "apiName": "translatorv3",
    "flavorSpecificSettings": {
      "DOD": {
        "serviceUrl": "https://translator-batch-test.cognitiveservices.azure.com/"
      },
      "DOGFOOD": {
        "serviceUrl": "https://translator-batch-test.cognitiveservices.azure.com/"
      },
      "FAIRFAX": {
        "serviceUrl": "https://translator-batch-test.cognitiveservices.azure.com/"
      },
      "GCC": {
        "serviceUrl": "https://translator-batch-test.cognitiveservices.azure.com/"
      },
      "GCCHIGH": {
        "serviceUrl": "https://translator-batch-test.cognitiveservices.azure.com/"
      },
      "MOONCAKE": {
        "serviceUrl": "https://translator-batch-test.cognitiveservices.azure.com/"
      },
      "PRODUCTION": {
        "serviceUrl": "https://translator-batch-test.cognitiveservices.azure.com/"
      },
      "USNAT": {
        "serviceUrl": "https://translator-batch-test.cognitiveservices.azure.com/"
      },
      "USSEC": {
        "serviceUrl": "https://translator-batch-test.cognitiveservices.azure.com/"
      }
    },
    "serviceUrl": "[variables('flavorSpecificSettings')[parameters('environmentFlavor')].serviceUrl]",
    "apimSpecificSettings": {},
    "perRegionSettings": {
      "brazil-001": {
        "redirectMode": "global"
      },
      "europe-002": {
        "redirectMode": "global"
      },
      "france-001": {
        "redirectMode": "global"
      },
      "germany-001": {
        "redirectMode": "global"
      },
      "korea-001": {
        "redirectMode": "global"
      },
      "logic-apis-brazilsoutheast": {
        "redirectMode": "global"
      },
      "logic-apis-francecentral": {
        "redirectMode": "global"
      },
      "logic-apis-francesouth": {
        "redirectMode": "global"
      },
      "logic-apis-germanynorth": {
        "redirectMode": "global"
      },
      "logic-apis-germanywestcentral": {
        "redirectMode": "global"
      },
      "logic-apis-jioindiawest-001": {
        "redirectMode": "global"
      },
      "logic-apis-koreacentral-001": {
        "redirectMode": "global"
      },
      "logic-apis-koreasouth-001": {
        "redirectMode": "global"
      },
      "logic-apis-norwayeast": {
        "redirectMode": "global"
      },
      "logic-apis-norwaywest-001": {
        "redirectMode": "global"
      },
      "logic-apis-polandcentral": {
        "redirectMode": "global"
      },
      "logic-apis-qatarcentral": {
        "redirectMode": "global"
      },
      "logic-apis-southafricanorth": {
        "redirectMode": "global"
      },
      "logic-apis-southafricawest-001": {
        "redirectMode": "global"
      },
      "logic-apis-swedencentral": {
        "redirectMode": "global"
      },
      "logic-apis-switzerlandnorth": {
        "redirectMode": "global"
      },
      "logic-apis-switzerlandwest": {
        "redirectMode": "global"
      },
      "logic-apis-uaecentral": {
        "redirectMode": "global"
      },
      "logic-apis-uaenorth": {
        "redirectMode": "global"
      },
      "logic-apis-usnateast-001": {
        "redirectMode": "global"
      },
      "logic-apis-usnatwest-001": {
        "redirectMode": "global"
      },
      "logic-apis-usseceast-001": {
        "redirectMode": "global"
      },
      "logic-apis-ussecwest-001": {
        "redirectMode": "global"
      },
      "logic-apis-westus3": {
        "redirectMode": "global"
      },
      "norway-001": {
        "redirectMode": "global"
      },
      "singapore-001": {
        "redirectMode": "global"
      },
      "southafrica-001": {
        "redirectMode": "global"
      },
      "switzerland-001": {
        "redirectMode": "global"
      },
      "tip1europe-001": {
        "redirectMode": "global"
      },
      "uae-001": {
        "redirectMode": "global"
      },
      "uk-001": {
        "redirectMode": "global"
      },
      "unitedstates-002": {
        "redirectMode": "global"
      },
      "usnat-001": {
        "redirectMode": "global"
      },
      "ussec-001": {
        "redirectMode": "global"
      }
    },
    "allSupportedLanguages": [],
    "logicAppsSupportedLanguages": [],
    "localizations": {}
  },
  "resources": [
    {
      "type": "Microsoft.Web/apiManagementAccounts/apis",
      "properties": {
        "generalInformation": {
          "tier": "Standard",
          "displayName": "Microsoft Translator V3",
          "description": "Microsoft Azure Cognitive Services Translator lets you to translate text and documents over 100 languages using general or custom models.",
          "iconUrl": "[parameters('iconUrl')]",
          "publisher": "Microsoft Translator"
        },
        "path": "translatorv3",
        "protocols": [
          "https"
        ],
        "backendService": {
          "serviceUrl": "[variables('serviceUrl')]"
        },
        "apiDefinitionUrl": "[deploymentContext('apiDefinitionUrl')]",
        "interfaces": {},
        "policies": {
          "content": "<policies><inbound><set-variable name=\"isCodeless\" value=\"@(true)\" /><set-header name=\"Apihub-Subscription-Key\" exists-action=\"delete\" /><rate-limit-by-key counter-key=\"@(context.Request.MatchedParameters[&quot;connectionId&quot;])\" calls=\"100\" renewal-period=\"60\" flexible-retry-window=\"true\" /><base /><choose><when condition=\"@{var productId = context?.Product?.Id ?? string.Empty;if (!string.Equals(productId, &quot;ApiHub&quot;, StringComparison.OrdinalIgnoreCase)){return false;}var executionRestrictions = (string)context.Variables.GetValueOrDefault&lt;string&gt;(&quot;executionRestrictions&quot;, null);return !string.IsNullOrWhiteSpace(executionRestrictions);}\"><set-variable name=\"executionRestrictionsVersion\" value=\"@{var executionRestrictions = JObject.Parse(context.Variables[&quot;executionRestrictions&quot;] as string);return executionRestrictions[&quot;version&quot;]?.Value&lt;int&gt;() ?? 1;}\" /><set-variable name=\"_ApimLogMessage_message\" value=\"@(&quot;Validating Execution Restrictions version: &quot; + context.Variables[&quot;executionRestrictionsVersion&quot;])\" /><log-to-eventhub logger-id=\"APIMMessageLogger\">@{string message = (string)context.Variables[\"_ApimLogMessage_message\"];message = String.IsNullOrEmpty(message) ? string.Empty : string.Concat('\"', message.Replace(\"\\\"\", \"\\\"\\\"\"), '\"');return string.Join(\",\",DateTime.UtcNow.ToString(\"o\"),context.Variables.GetValueOrDefault(\"clientRequestId\", string.Empty),context.Variables.GetValueOrDefault(\"connectionId\", string.Empty),context.Api.Name,context.Deployment.ServiceName,message,\"informational\",context.Operation.Id );}</log-to-eventhub><choose><when condition=\"@((context.Variables[&quot;executionRestrictionsVersion&quot;] as int?) == 1)\"><rewrite-uri template=\"@{var executionRestrictions = JObject.Parse(context.Variables[&quot;executionRestrictions&quot;] as string);var internalPolicy = JObject.Parse(executionRestrictions?[&quot;policy&quot;]?.ToString() ?? &quot;{}&quot;);var type = internalPolicy?[&quot;type&quot;]?.ToString();var segments = context.Request.Url.Path.Split('/');if (type == &quot;tabular&quot;){var apiVer = executionRestrictions[&quot;apiVer&quot;]?.Value&lt;int&gt;() ?? 1;var pathTableIdx = apiVer &gt; 1 ? 5 : 4;if (segments.Length &lt;= pathTableIdx){throw new Exception(&quot;EXPECTED400: Error validating Execution Restrictions - Bad URL&quot;);}var table = System.Net.WebUtility.UrlDecode(System.Net.WebUtility.UrlDecode(segments[pathTableIdx]));var allowedActions = internalPolicy[&quot;dataSources&quot;]?[table.ToLowerInvariant()]?.ToObject&lt;List&lt;string&gt;&gt;();if (allowedActions != null &amp;&amp; allowedActions.Contains(context.Request.Method, StringComparer.OrdinalIgnoreCase)){return context.Request.Url.Path;}throw new Exception($&quot;EXPECTED403: Method {context.Request.Method.ToLowerInvariant()} is not allowed for table {table}&quot;);} else if (type == &quot;action&quot;){var allowedActions = internalPolicy[&quot;dataSources&quot;]?[&quot;actions&quot;]?.ToObject&lt;List&lt;string&gt;&gt;();if (allowedActions != null &amp;&amp; allowedActions.Contains(context.Operation.Id, StringComparer.OrdinalIgnoreCase)){return context.Request.Url.Path;}throw new Exception($&quot;EXPECTED403: Action {context.Operation.Id} is not allowed&quot;);}throw new Exception(&quot;EXPECTED400: Error validating Execution Restrictions - Bad Execution Restrictions&quot;);}\" /></when></choose></when></choose><set-header name=\"X-MS-APIM-Tokens\" exists-action=\"delete\" /><set-header name=\"x-ms-apim-tokens\" exists-action=\"delete\" /><set-header name=\"x-ms-referrer\" exists-action=\"delete\" /><set-header name=\"x-ms-referrer-prefix\" exists-action=\"delete\" /><set-header name=\"x-ms-shared-key\" exists-action=\"delete\" /><set-header name=\"x-ms-shared-key2\" exists-action=\"delete\" /><set-header name=\"origin\" exists-action=\"delete\" /><choose><when condition=\"@(context.Variables.ContainsKey(&quot;tokens&quot;) &amp;&amp; !string.IsNullOrEmpty((string)((context.Variables[&quot;tokens&quot;] as JObject) ?.GetValue(&quot;api_key&quot;, StringComparison.OrdinalIgnoreCase))))\"><set-header name=\"Ocp-Apim-Subscription-Key\" exists-action=\"override\"><value>@((string)((JObject)context.Variables[\"tokens\"]).GetValue(\"api_key\", StringComparison.OrdinalIgnoreCase))</value></set-header></when></choose></inbound><backend><forward-request timeout=\"120\" /></backend><outbound><base /></outbound></policies>",
          "policyTemplateInstances": [
            {
              "parameters": {
                "x-ms-apimTemplate-operationName": [
                  "Translate",
                  "Transliterate",
                  "StartDocumentTranslation",
                  "GetTranslationStatus",
                  "CancelTranslation",
                  "GetTranslationsStatus",
                  "GetDocumentStatus",
                  "GetSupportedDocumentFormats",
                  "GetSupportedGlossaryFormats",
                  "GetSupportedStorageSources",
                  "GetDocumentsStatus",
                  "GetGlossaryFormatVersion"
                ],
                "x-ms-apimTemplateParameter.urlTemplate": "https://@connectionParameters('TranslatorResourceName').cognitiveservices.azure.com"
              },
              "templateId": "dynamichosturl",
              "title": "Translator resource instance"
            },
            {
              "parameters": {
                "x-ms-apimTemplateParameter.name": "Ocp-Apim-Subscription-Key",
                "x-ms-apimTemplateParameter.value": "@connectionParameters('subscriptionKey')",
                "x-ms-apimTemplateParameter.existsAction": "override",
                "x-ms-apimTemplate-policySection": "Request",
                "x-ms-apimTemplate-operationName": [
                  "Translate",
                  "Transliterate",
                  "StartDocumentTranslation",
                  "GetTranslationStatus",
                  "CancelTranslation",
                  "GetTranslationsStatus",
                  "GetDocumentStatus",
                  "GetSupportedDocumentFormats",
                  "GetSupportedGlossaryFormats",
                  "GetSupportedStorageSources",
                  "GetDocumentsStatus",
                  "GetGlossaryFormatVersion"
                ]
              },
              "templateId": "setheader",
              "title": "Ocp-Apim-Subscription-Key"
            }
          ]
        },
        "metadata": {
          "source": "marketplace",
          "brandColor": "#1267AE",
          "stackOwner": "Microsoft Translator",
          "useNewApimVersion": "true"
        },
        "capabilities": [],
        "connectionParameters": {
          "TranslatorResourceName": {
            "type": "string",
            "uiDefinition": {
              "displayName": "Translator resource name",
              "description": "Enter the Microsoft Translator resource name",
              "tooltip": "Provide your Microsoft Translator resource name",
              "constraints": {
                "tabIndex": 4,
                "clearText": true,
                "required": "true"
              }
            }
          },
          "subscriptionKey": {
            "type": "securestring",
            "uiDefinition": {
              "displayName": "Resource Key",
              "description": "Azure Cognitive Services resource key for Translator.",
              "tooltip": "Azure Cognitive Services resource key for Translator.",
              "constraints": {
                "required": "true"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Web/apiManagementAccounts/apis/localizedDefinitions",
      "properties": {
        "generalInformation": {
          "tier": "Standard",
          "displayName": "[localizations('connectionProviderDisplayName')]",
          "description": "[localizations('connectionProviderDescription')]",
          "iconUrl": "[parameters('iconUrl')]",
          "publisher": "Microsoft Translator"
        },
        "path": "translatorv3",
        "protocols": [
          "https"
        ],
        "backendService": {
          "serviceUrl": "[variables('serviceUrl')]"
        },
        "apiDefinitionUrl": "[deploymentContext('apiDefinitionUrl')]",
        "interfaces": {},
        "policies": {
          "content": "<policies><inbound><set-variable name=\"isCodeless\" value=\"@(true)\" /><set-header name=\"Apihub-Subscription-Key\" exists-action=\"delete\" /><rate-limit-by-key counter-key=\"@(context.Request.MatchedParameters[&quot;connectionId&quot;])\" calls=\"100\" renewal-period=\"60\" flexible-retry-window=\"true\" /><base /><choose><when condition=\"@{var productId = context?.Product?.Id ?? string.Empty;if (!string.Equals(productId, &quot;ApiHub&quot;, StringComparison.OrdinalIgnoreCase)){return false;}var executionRestrictions = (string)context.Variables.GetValueOrDefault&lt;string&gt;(&quot;executionRestrictions&quot;, null);return !string.IsNullOrWhiteSpace(executionRestrictions);}\"><set-variable name=\"executionRestrictionsVersion\" value=\"@{var executionRestrictions = JObject.Parse(context.Variables[&quot;executionRestrictions&quot;] as string);return executionRestrictions[&quot;version&quot;]?.Value&lt;int&gt;() ?? 1;}\" /><set-variable name=\"_ApimLogMessage_message\" value=\"@(&quot;Validating Execution Restrictions version: &quot; + context.Variables[&quot;executionRestrictionsVersion&quot;])\" /><log-to-eventhub logger-id=\"APIMMessageLogger\">@{string message = (string)context.Variables[\"_ApimLogMessage_message\"];message = String.IsNullOrEmpty(message) ? string.Empty : string.Concat('\"', message.Replace(\"\\\"\", \"\\\"\\\"\"), '\"');return string.Join(\",\",DateTime.UtcNow.ToString(\"o\"),context.Variables.GetValueOrDefault(\"clientRequestId\", string.Empty),context.Variables.GetValueOrDefault(\"connectionId\", string.Empty),context.Api.Name,context.Deployment.ServiceName,message,\"informational\",context.Operation.Id );}</log-to-eventhub><choose><when condition=\"@((context.Variables[&quot;executionRestrictionsVersion&quot;] as int?) == 1)\"><rewrite-uri template=\"@{var executionRestrictions = JObject.Parse(context.Variables[&quot;executionRestrictions&quot;] as string);var internalPolicy = JObject.Parse(executionRestrictions?[&quot;policy&quot;]?.ToString() ?? &quot;{}&quot;);var type = internalPolicy?[&quot;type&quot;]?.ToString();var segments = context.Request.Url.Path.Split('/');if (type == &quot;tabular&quot;){var apiVer = executionRestrictions[&quot;apiVer&quot;]?.Value&lt;int&gt;() ?? 1;var pathTableIdx = apiVer &gt; 1 ? 5 : 4;if (segments.Length &lt;= pathTableIdx){throw new Exception(&quot;EXPECTED400: Error validating Execution Restrictions - Bad URL&quot;);}var table = System.Net.WebUtility.UrlDecode(System.Net.WebUtility.UrlDecode(segments[pathTableIdx]));var allowedActions = internalPolicy[&quot;dataSources&quot;]?[table.ToLowerInvariant()]?.ToObject&lt;List&lt;string&gt;&gt;();if (allowedActions != null &amp;&amp; allowedActions.Contains(context.Request.Method, StringComparer.OrdinalIgnoreCase)){return context.Request.Url.Path;}throw new Exception($&quot;EXPECTED403: Method {context.Request.Method.ToLowerInvariant()} is not allowed for table {table}&quot;);} else if (type == &quot;action&quot;){var allowedActions = internalPolicy[&quot;dataSources&quot;]?[&quot;actions&quot;]?.ToObject&lt;List&lt;string&gt;&gt;();if (allowedActions != null &amp;&amp; allowedActions.Contains(context.Operation.Id, StringComparer.OrdinalIgnoreCase)){return context.Request.Url.Path;}throw new Exception($&quot;EXPECTED403: Action {context.Operation.Id} is not allowed&quot;);}throw new Exception(&quot;EXPECTED400: Error validating Execution Restrictions - Bad Execution Restrictions&quot;);}\" /></when></choose></when></choose><set-header name=\"X-MS-APIM-Tokens\" exists-action=\"delete\" /><set-header name=\"x-ms-apim-tokens\" exists-action=\"delete\" /><set-header name=\"x-ms-referrer\" exists-action=\"delete\" /><set-header name=\"x-ms-referrer-prefix\" exists-action=\"delete\" /><set-header name=\"x-ms-shared-key\" exists-action=\"delete\" /><set-header name=\"x-ms-shared-key2\" exists-action=\"delete\" /><set-header name=\"origin\" exists-action=\"delete\" /><choose><when condition=\"@(context.Variables.ContainsKey(&quot;tokens&quot;) &amp;&amp; !string.IsNullOrEmpty((string)((context.Variables[&quot;tokens&quot;] as JObject) ?.GetValue(&quot;api_key&quot;, StringComparison.OrdinalIgnoreCase))))\"><set-header name=\"Ocp-Apim-Subscription-Key\" exists-action=\"override\"><value>@((string)((JObject)context.Variables[\"tokens\"]).GetValue(\"api_key\", StringComparison.OrdinalIgnoreCase))</value></set-header></when></choose></inbound><backend><forward-request timeout=\"120\" /></backend><outbound><base /></outbound></policies>",
          "policyTemplateInstances": [
            {
              "parameters": {
                "x-ms-apimTemplate-operationName": [
                  "Translate",
                  "Transliterate",
                  "StartDocumentTranslation",
                  "GetTranslationStatus",
                  "CancelTranslation",
                  "GetTranslationsStatus",
                  "GetDocumentStatus",
                  "GetSupportedDocumentFormats",
                  "GetSupportedGlossaryFormats",
                  "GetSupportedStorageSources",
                  "GetDocumentsStatus",
                  "GetGlossaryFormatVersion"
                ],
                "x-ms-apimTemplateParameter.urlTemplate": "https://@connectionParameters('TranslatorResourceName').cognitiveservices.azure.com"
              },
              "templateId": "dynamichosturl",
              "title": "Translator resource instance"
            },
            {
              "parameters": {
                "x-ms-apimTemplateParameter.name": "Ocp-Apim-Subscription-Key",
                "x-ms-apimTemplateParameter.value": "@connectionParameters('subscriptionKey')",
                "x-ms-apimTemplateParameter.existsAction": "override",
                "x-ms-apimTemplate-policySection": "Request",
                "x-ms-apimTemplate-operationName": [
                  "Translate",
                  "Transliterate",
                  "StartDocumentTranslation",
                  "GetTranslationStatus",
                  "CancelTranslation",
                  "GetTranslationsStatus",
                  "GetDocumentStatus",
                  "GetSupportedDocumentFormats",
                  "GetSupportedGlossaryFormats",
                  "GetSupportedStorageSources",
                  "GetDocumentsStatus",
                  "GetGlossaryFormatVersion"
                ]
              },
              "templateId": "setheader",
              "title": "Ocp-Apim-Subscription-Key"
            }
          ]
        },
        "metadata": {
          "source": "marketplace",
          "brandColor": "#1267AE",
          "stackOwner": "Microsoft Translator",
          "useNewApimVersion": "true"
        },
        "capabilities": [],
        "connectionParameters": "[localizations('connectionParameters')]"
      }
    }
  ],
  "outputs": {}
}